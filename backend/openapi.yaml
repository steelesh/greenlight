openapi: 3.1.0
info:
  title: Greenlight API
  description: API for the Greenlight movie database application
  version: development
  contact:
    name: API Support
servers:
  - url: /v1
    description: API v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          oneOf:
            - type: string
              example: the requested resource could not be found
            - type: object
              additionalProperties:
                type: string
              example: {"title": "must be provided", "year": "must be a positive integer"}
    HealthCheck:
      type: object
      required:
        - status
        - system_info
      properties:
        status:
          type: string
          example: available
        system_info:
          type: object
          required:
            - environment
            - version
          properties:
            environment:
              type: string
              example: development
            version:
              type: string
              example: a1b2c3d
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: The Shawshank Redemption
        year:
          type: integer
          format: int32
          example: 1994
        runtime:
          type: string
          example: 142 mins
        genres:
          type: array
          items:
            type: string
          example:
            - drama
            - crime
        version:
          type: integer
          format: int32
          example: 1
    MoviesResponse:
      type: object
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
        metadata:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            page_size:
              type: integer
              example: 20
            first_page:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 5
            total_records:
              type: integer
              example: 100
    CreateMovieRequest:
      type: object
      required:
        - title
        - year
        - runtime
        - genres
      properties:
        title:
          type: string
          example: The Shawshank Redemption
        year:
          type: integer
          format: int32
          example: 1994
        runtime:
          type: string
          example: 142 mins
        genres:
          type: array
          items:
            type: string
          example:
            - drama
            - crime
    UpdateMovieRequest:
      type: object
      properties:
        title:
          type: string
          example: The Shawshank Redemption
        year:
          type: integer
          format: int32
          example: 1994
        runtime:
          type: string
          example: 142 mins
        genres:
          type: array
          items:
            type: string
          example:
            - drama
            - crime
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        activated:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: pa55word
    ActivateUserRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    Token:
      type: object
      properties:
        token:
          type: string
          example: ABCDEFGHIJKLMNOPQRSTUVWXYZ
        expiry:
          type: string
          format: date-time
    AuthenticationTokenRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: pa55word
paths:
  /healthcheck:
    get:
      summary: Get API health status
      description: Returns the health status of the API
      operationId: getHealthcheck
      tags:
        - Health
      responses:
        '200':
          description: A successful response with health status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /movies:
    get:
      summary: List movies
      description: Returns a list of movies
      operationId: getMovies
      tags:
        - Movies
      security:
        - bearerAuth: []
      parameters:
        - name: title
          in: query
          description: Filter by movie title
          required: false
          schema:
            type: string
        - name: genres
          in: query
          description: Filter by movie genres
          required: false
          schema:
            type: array
            items:
              type: string
            style: form
            explode: false
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: sort
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            enum:
              - id
              - title
              - year
              - runtime
              - '-id'
              - '-title'
              - '-year'
              - '-runtime'
            default: id
      responses:
        '200':
          description: A successful response with a list of movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviesResponse'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new movie
      description: Create a new movie record in the database
      operationId: createMovie
      tags:
        - Movies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMovieRequest'
      responses:
        '201':
          description: Successfully created a new movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/movies/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: Movie ID
        schema:
          type: integer
          format: int64
    get:
      summary: Get a specific movie
      description: Returns details for a specific movie
      operationId: getMovie
      tags:
        - Movies
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A successful response with movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update a movie
      description: Update a specific movie record
      operationId: updateMovie
      tags:
        - Movies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieRequest'
      responses:
        '200':
          description: Successfully updated movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Edit conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a movie
      description: Delete a specific movie record
      operationId: deleteMovie
      tags:
        - Movies
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully deleted movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: movie successfully deleted
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      summary: Register a new user
      description: Register a new user in the system
      operationId: registerUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Successfully registered user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicate email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/activated:
    put:
      summary: Activate a user account
      description: Activate a new user account using a token
      operationId: activateUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateUserRequest'
      responses:
        '200':
          description: User successfully activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user successfully activated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/authentication:
    post:
      summary: Create authentication token
      description: Create a new authentication token for a user
      operationId: createAuthToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationTokenRequest'
      responses:
        '201':
          description: Authentication token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
