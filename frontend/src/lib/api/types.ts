/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API health status
         * @description Returns the health status of the API
         */
        get: operations["getHealthcheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List movies
         * @description Returns a list of movies
         */
        get: operations["getMovies"];
        put?: never;
        /**
         * Create a new movie
         * @description Create a new movie record in the database
         */
        post: operations["createMovie"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Movie ID */
                id: number;
            };
            cookie?: never;
        };
        /**
         * Get a specific movie
         * @description Returns details for a specific movie
         */
        get: operations["getMovie"];
        put?: never;
        post?: never;
        /**
         * Delete a movie
         * @description Delete a specific movie record
         */
        delete: operations["deleteMovie"];
        options?: never;
        head?: never;
        /**
         * Update a movie
         * @description Update a specific movie record
         */
        patch: operations["updateMovie"];
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Register a new user in the system
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/activated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Activate a user account
         * @description Activate a new user account using a token
         */
        put: operations["activateUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/authentication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create authentication token
         * @description Create a new authentication token for a user
         */
        post: operations["createAuthToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            error: string | {
                [key: string]: string;
            };
        };
        HealthCheck: {
            /** @example available */
            status: string;
            system_info: {
                /** @example development */
                environment: string;
                /** @example a1b2c3d */
                version: string;
            };
        };
        Movie: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            /** @example The Shawshank Redemption */
            title?: string;
            /**
             * Format: int32
             * @example 1994
             */
            year?: number;
            /** @example 142 mins */
            runtime?: string;
            /** @example [
             *       "drama",
             *       "crime"
             *     ] */
            genres?: string[];
            /**
             * Format: int32
             * @example 1
             */
            version?: number;
        };
        MoviesResponse: {
            movies?: components["schemas"]["Movie"][];
            metadata?: {
                /** @example 1 */
                current_page?: number;
                /** @example 20 */
                page_size?: number;
                /** @example 1 */
                first_page?: number;
                /** @example 5 */
                last_page?: number;
                /** @example 100 */
                total_records?: number;
            };
        };
        CreateMovieRequest: {
            /** @example The Shawshank Redemption */
            title: string;
            /**
             * Format: int32
             * @example 1994
             */
            year: number;
            /** @example 142 mins */
            runtime: string;
            /** @example [
             *       "drama",
             *       "crime"
             *     ] */
            genres: string[];
        };
        UpdateMovieRequest: {
            /** @example The Shawshank Redemption */
            title?: string;
            /**
             * Format: int32
             * @example 1994
             */
            year?: number;
            /** @example 142 mins */
            runtime?: string;
            /** @example [
             *       "drama",
             *       "crime"
             *     ] */
            genres?: string[];
        };
        User: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            /** @example John Doe */
            name?: string;
            /**
             * Format: email
             * @example john@example.com
             */
            email?: string;
            /** @example true */
            activated?: boolean;
            /** Format: date-time */
            created_at?: string;
        };
        CreateUserRequest: {
            /** @example John Doe */
            name: string;
            /**
             * Format: email
             * @example john@example.com
             */
            email: string;
            /**
             * Format: password
             * @example pa55word
             */
            password: string;
        };
        ActivateUserRequest: {
            /** @example ABCDEFGHIJKLMNOPQRSTUVWXYZ */
            token: string;
        };
        Token: {
            /** @example ABCDEFGHIJKLMNOPQRSTUVWXYZ */
            token?: string;
            /** Format: date-time */
            expiry?: string;
        };
        AuthenticationTokenRequest: {
            /**
             * Format: email
             * @example john@example.com
             */
            email: string;
            /**
             * Format: password
             * @example pa55word
             */
            password: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealthcheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful response with health status information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getMovies: {
        parameters: {
            query?: {
                /** @description Filter by movie title */
                title?: string;
                /** @description Filter by movie genres */
                genres?: string[];
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                page_size?: number;
                /** @description Sort field */
                sort?: "id" | "title" | "year" | "runtime" | "-id" | "-title" | "-year" | "-runtime";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful response with a list of movies */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MoviesResponse"];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Permission denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createMovie: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMovieRequest"];
            };
        };
        responses: {
            /** @description Successfully created a new movie */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movie"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Permission denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getMovie: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Movie ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful response with movie details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movie"];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Permission denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Movie not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteMovie: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Movie ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted movie */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example movie successfully deleted */
                        message?: string;
                    };
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Permission denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Movie not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateMovie: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Movie ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMovieRequest"];
            };
        };
        responses: {
            /** @description Successfully updated movie */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movie"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Authentication error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Permission denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Movie not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Edit conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description Successfully registered user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Duplicate email */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    activateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivateUserRequest"];
            };
        };
        responses: {
            /** @description User successfully activated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example user successfully activated */
                        message?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Token not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createAuthToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticationTokenRequest"];
            };
        };
        responses: {
            /** @description Authentication token created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
